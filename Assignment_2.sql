USE MAVENMOVIES;

-- Q1) Retrieve the total number of rentals made in the Sakila database.
select count(rental_id) from rental;
select * from rental;

-- Q2) Find the average rental duration (in days) of movies rented from the Sakila database.
SELECT avg(rental_duration) FROM FILM;

-- Q3) Display the first name and last name of customers in uppercase.
SELECT 
    UPPER(first_name) AS first_name,
    UPPER(last_name) AS last_name
FROM
    customer;

-- Q4) Extract the month from the rental date and display it alongside the rental ID.
-- =>
SELECT 
    rental_id, MONTH(rental_date) AS Month
FROM
    rental;
    
-- Q5) Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
-- =>
SELECT 
    customer_id, COUNT(rental_id) AS Rentals
FROM
    payment
GROUP BY customer_id;

-- Q6) Find the total revenue generated by each store.

SELECT 
    SUM(amount)
FROM
    payment
GROUP BY staff_id;

-- Q7) Display the title of the movie, customer s first name, and last name who rented it.
SELECT 
    title, first_name, last_name
FROM
    film f
        INNER JOIN
    inventory i ON f.film_id = i.film_id
        INNER JOIN
    rental r ON i.inventory_id = r.inventory_id
        INNER JOIN
    customer c ON r.customer_id = c.customer_id;
    
-- Q8) Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
SELECT 
    CONCAT(first_name, ' ', last_name) AS Names, title
FROM
    actor a
        INNER JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        INNER JOIN
    film f ON fa.film_id = f.film_id
WHERE
    title LIKE 'Gone with the Wind';
    
-- Q1) Determine the total number of rentals for each category of movies.
-- =>
SELECT 
    name as Category, COUNT(rental_id) as Number_of_Rentals
FROM
    category c
        INNER JOIN
    film_category f ON c.category_id = f.category_id
        INNER JOIN
    inventory i ON f.film_id = i.film_id
        INNER JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY name;

-- Q2) Find the average rental rate of movies in each language.
SELECT 
    name, AVG(amount)
FROM
    payment p
        INNER JOIN
    rental r ON p.rental_id = r.rental_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON f.film_id = i.film_id
		INNER JOIN
	language l ON l.language_id = f.language_id
GROUP BY name;

-- Q3) Retrieve the customer names along with the total amount they've spent on rentals.
SELECT 
    CONCAT(first_name, ' ', last_name) AS name, SUM(amount) as Total_amount
FROM
    payment p
        INNER JOIN
    rental r ON r.rental_id = p.rental_id
        INNER JOIN
    customer c ON c.customer_id = r.customer_id
GROUP BY name;

-- Q4) List the titles of movies rented by each customer in a particular city (e.g., 'London').
SELECT 
    CONCAT(first_name, ' ', last_name) AS name,title, city
FROM
    city c
        INNER JOIN
    address a ON a.city_id = c.city_id
        INNER JOIN
    customer ON customer.address_id = a.address_id
        INNER JOIN
    rental r ON r.customer_id = customer.customer_id
        INNER JOIN
    inventory i ON i.inventory_id = r.inventory_id
        INNER JOIN
    film f ON f.film_id = i.film_id
    where city like 'Lublin';
    
-- Q5) Display the top 5 rented movies along with the number of times they've been rented.
-- select title, count(rental_id) from rental r inner join inventory i on r.inventory_id = i.inventory_id inner join film f on 
select * from film; 
select * from rental;
select * from inventory;

SELECT 
    title, COUNT(rental_id) as number_of_rentals
FROM
    film f
        INNER JOIN
    inventory i ON f.film_id = i.film_id
        INNER JOIN
    rental r ON i.inventory_id = r.inventory_id
    group by title
    order by number_of_rentals desc
    limit 5;
    
-- 	Q6) Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
select * from customer;
SELECT 
    CONCAT(first_name, ' ', last_name) AS Name
FROM
    rental r
        INNER JOIN
    inventory i ON i.inventory_id = r.inventory_id
        INNER JOIN
    customer c  ON c.customer_id = r.customer_id
		INNER JOIN
	store s on s.store_id = c.store_id;